<?xml version="1.0" encoding="UTF-8" ?>
<!--<!DOCTYPE entity-mappings  PUBLIC-->
<!--            "-//Hibernate/Hibernate Mapping DTD 3.0//EN"-->
<!--            "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">-->
<entity-mappings xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm
    http://xmlns.jcp.org/xml/ns/persistence/orm_2_2.xsd" version="2.2">

    <named-query name="DFuncMenuVO.getDFuncmenu">
        <query>
            select s from DFuncMenuVO s
            left join fetch s.pkParent l
            left join fetch s.pkSystem p
            left join fetch s.pkOrg o
            left join fetch s.pkDept d
            left join fetch s.pkOperator t
            where s.ifPower = '1' and s.ifEnabled = '0' order by s.ts desc
        </query>
    </named-query>

    <named-query name="getDFuncmenuList">
        <query>
            select s from DFuncMenuVO s
            left join fetch s.pkParent l
            left join fetch s.pkSystem p
            left join fetch s.pkOrg o
            left join fetch s.pkDept d
            left join fetch s.pkOperator t
        </query>
    </named-query>
    <named-query name="getDFuncmenuList.count">
        <query>
            select count(s) from DFuncMenuVO s
        </query>
    </named-query>

    <named-query name="test888">
        <query>
            select b from ParameterDO b
             where 1 = 1 and (?1 is null or b.paramType = ?1)
        </query>
    </named-query>
    <named-query name="test999">
        <query>
            select count(b) from ParameterDO b
            where 1 = 1 and (?1 is null or b.paramType = ?1)
        </query>
    </named-query>

    <named-query name="query111">
        <query>
            select b from ParameterVO b
             left join fetch b.pkParamType m
             left join fetch m.pkOperator r
             left join fetch r.pkOrg g
             left join fetch b.parentParameter er
             order by b.pkParameter desc
        </query>
    </named-query>

    <named-query name="query111.count">
        <query>
            select count(b) from ParameterVO b
        </query>
    </named-query>

    <named-native-query name="pagequery">
        <query>
            select r.pk_parameter,
            r.pk_param_type,
            r.parent_parameter,
            r.param_name,
            r.param_code,
            r.param_value,
            r.memo,
            r.is_enable,
            r.ts,
            r.mdb_code,
            r.is_only,
            r.value_type,pe.param_type from yls_parameter r
            left join yls_param_type pe on r.pk_param_type = pe.pk_param_type
            order by r.ts desc
        </query>
    </named-native-query>

    <named-native-query name="pagequery.count">
        <query>
            select count(r.pk_parameter) from yls_parameter r
            left join yls_param_type pe on r.pk_param_type = pe.pk_param_type
        </query>
    </named-native-query>

    <named-native-query name="test1">
        <query>
            select r.pk_parameter from yls_parameter r
            left join yls_param_type pe on r.pk_param_type = pe.pk_param_type
            order by r.ts desc
        </query>
    </named-native-query>

    <named-query name="test2">
        <query>
            select b from ParameterVO b
            left join fetch b.pkParamType m
            left join fetch m.pkOperator r
            left join fetch r.pkOrg g
            left join fetch b.parentParameter er
            order by b.pkParameter desc
        </query>
    </named-query>

<!--    <named-query name="orgRefTreeQuery">-->
<!--        <query>-->
<!--            select p from OrgrefVO p-->
<!--            start with p.pkOrg = '1003'-->
<!--            connected by p.parentPk = prior p.pkOrg-->
<!--            order by pkOrg-->
<!--        </query>-->
<!--    </named-query>-->

<!--    <named-query name="orgRefTreeQuery.count">-->
<!--        <query>-->
<!--            select count(p.pk_org) from sm_org p-->
<!--            start with p.pkOrg = '1003'-->
<!--            connected by p.parentPk = prior p.pkOrg-->
<!--        </query>-->
<!--    </named-query>-->

    <named-native-query name="orgRefJPQLQuery">
        <query>
            select p from OrgrefVO p order by pkOrg
        </query>
    </named-native-query>

    <named-native-query name="orgRefJPQLQuery.count">
        <query>
            select count(p.pkOrg) from OrgrefVO p
        </query>
    </named-native-query>

    <named-query name="DFuncMenuVO.findFuncmenuVO">
        <query>
            select s from DFuncMenuVO s
            left join fetch s.pkParent l
            left join fetch s.pkSystem p
            left join fetch s.pkOrg o
            left join fetch s.pkDept d
            left join fetch s.pkOperator t
            where s.pkFuncmenu = '824f6343a4334fa6a1d4'
        </query>
    </named-query>

    <named-native-query name="Test.test" result-set-mapping="test123">
        <query>
            select d.pk_parameter pkParameter,d.param_name paramName from YLS_PARAMETER d
             left join YLS_PARAM_TYPE pe on d.pk_param_type = pe.pk_param_type
             where pe.pk_param_type = '0001AA1000000001346I'
        </query>
    </named-native-query>



    <named-native-query name="DFuncMenuVO.getDFuncmentest" result-set-mapping="findByNativeone">
        <query>
            select s.pk_funcmenu pkFuncmenu,s.func_code funcCode,s.billstatus billstatus,m.system_code systemCode,m.system_name systemName from sm_business_menu s
            left join sm_system m on s.pk_system=m.pk_system
            where s.pk_funcmenu = '824f6343a4334fa6a1d4'
        </query>
    </named-native-query>

    <sql-result-set-mapping name="findByNativeone">
        <column-result name="pkFuncmenu" />
        <column-result name="funcCode" />
        <column-result name="billstatus" />
        <column-result name="systemCode" />
        <column-result name="systemName" />
    </sql-result-set-mapping>
    <sql-result-set-mapping name="test123">
        <column-result name="pkParameter"/>
        <column-result name="paramName"/>
    </sql-result-set-mapping>

    <named-query name="LoginClientRepo.validateUser">
        <query>
            select u from UserVO u
            left join fetch u.pkOrg
            lett join fetch u.pkDeptdoc
            where u.pkUserdeCode = ?1 and u.pkOrg.pkOrg = ?2 and u.password = ?3
        </query>
    </named-query>

    <named-query name="ListSystem">
        <query>
            select s from SystemVO s
            left join fetch s.pkOrg o
            left join fetch s.pkDept d
            left join fetch s.pkOperator t
        </query>
    </named-query>

    <named-query name="ListSystem.count">
        <query>
            select count(s.pkSystem) from SystemVO s
        </query>
    </named-query>

    <named-native-query name="getIrrEventInfo" result-set-mapping="IrrEventMapping">
        <query>
            SELECT DISTINCT M.IRR_TYPE_NAME, T.EVENT_CODE, SUB.VAL
            FROM YLS_IRR_EVENT_SET SUB
            INNER JOIN YLS_IRR_TYPE M ON M.PK_IRR_TYPE = SUB.PK_IRR_TYPE
            INNER JOIN YLS_EVENT_TYPE T ON SUB.PK_EVENT_TYPE = T.PK_EVENT_TYPE
            ORDER BY M.IRR_TYPE_NAME
        </query>
    </named-native-query>

    <sql-result-set-mapping name="IrrEventMapping">
        <column-result name="IRR_TYPE_NAME" />
        <column-result name="EVENT_CODE" />
        <column-result name="VAL" />
    </sql-result-set-mapping>

    <named-query name="EventRefQuery">
        <query>
            select p from EventTypeRefVO p
        </query>
    </named-query>

    <named-query name="EventRefQuery.count">
        <query>
            select count(p.pkEventType) from EventTypeRefVO p
        </query>
    </named-query>


</entity-mappings>